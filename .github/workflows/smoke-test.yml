name: Smoke Test

on:
  pull_request:
    branches: ["dev"]

permissions:
  actions: read

jobs:
  smoke-test:
    runs-on: blacksmith-2vcpu-ubuntu-2204

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Restore Docker build cache (Blacksmith cache)
      - name: Restore Docker build cache
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ runner.os }}-${{ github.ref }}-
            buildx-${{ runner.os }}-

      - name: Restore Rust cache
        uses: useblacksmith/cache@v5
        with:
          path: |
            rust_rewrite/target
            ~/.cargo/registry
          key: rust-${{ runner.os }}-${{ hashFiles('rust_rewrite/Cargo.lock') }}
          restore-keys: |
            rust-${{ runner.os }}-

      # Instead of building just the API container, start the entire compose stack
      - name: Start services with Docker Compose
        run: |
          cd rust_rewrite
          docker-compose -f docker-compose.test.yml build
          docker-compose -f docker-compose.test.yml up -d
      
      # Save the build cache
      - name: Save Docker build cache
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}

      - name: Wait for application to start
        run: |
          echo "Checking container status..."
          docker ps -a

          echo "Container logs:"
          docker logs sauron

          echo "Starting health check..."
          for i in {1..30}; do
            if curl -s http://localhost:8084/api/logout > /dev/null; then
              echo "Application is ready"
              exit 0
            fi
            echo "Waiting for application to start... ($i/30)"
            if [ $i -eq 1 ] || [ $((i % 5)) -eq 0 ]; then
              echo "Latest container logs:"
              docker logs --tail 20 sauron
            fi
            sleep 2
          done
          echo "Application failed to start within 60 seconds"
          echo "Final container logs:"
          docker logs sauron
          echo "Database container logs:"
          docker logs postgres
          exit 1

      - name: Test api/logout endpoint
        run: |
          SEARCH_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "http://localhost:8084/api/logout")
          if [ $SEARCH_STATUS -eq 200 ]; then
            echo "Logout endpoint test passed"
          else
            echo "Logout endpoint test failed with status $SEARCH_STATUS"
            exit 1
          fi

      # Uncomment these tests when you're ready to test them
      # - name: Test Search endpoint
      #   run: |
      #     SEARCH_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "http://localhost:8084/api/search?q=test")
      #     if [ $SEARCH_STATUS -eq 200 ]; then
      #       echo "Search endpoint test passed"
      #     else
      #       echo "Search endpoint test failed with status $SEARCH_STATUS"
      #       exit 1
      #     fi

      # - name: Test Login endpoint
      #   run: |
      #     LOGIN_STATUS=$(curl -X POST -H "Content-Type: application/json" \
      #       -d '{"username":"smoketest","password":"test"}' \
      #       -o /dev/null -s -w "%{http_code}\n" \
      #       http://localhost:8084/api/login)
      #     if [ $LOGIN_STATUS -eq 200 ]; then
      #       echo "Login endpoint test passed"
      #     else
      #       echo "Login endpoint test failed with status $LOGIN_STATUS"
      #       exit 1
      #     fi

      - name: Cleanup
        if: always()
        run: |
          cd rust_rewrite
          docker-compose -f docker-compose.test.yml down -v